package de.dkfz.odcf.guide.service.interfaces.importer

import de.dkfz.odcf.guide.entity.submissionData.File
import de.dkfz.odcf.guide.entity.submissionData.Sample
import de.dkfz.odcf.guide.entity.submissionData.Submission
import javax.management.relation.RelationException

interface ImportService {

    /**
     * Extracts information about the tagmentation library from a given sample identifier.
     *
     * @param sampleIdentifier Contains tagmentation library information
     * @param tagmentationLibrary If a tagmentation library is already given, the function returns it instead
     * @return Tagmentation library information extracted from the string of the sampleIdentifier
     */
    fun extractTagmentationLibraryFromSampleIdentifierIfNecessary(sampleIdentifier: String, tagmentationLibrary: String = ""): String

    /**
     * Generates a new internal identifier for extended submissions.
     *
     * @return A string starting with "o" and then 7 numbers
     */
    fun generateInternalIdentifier(): String

    /**
     * Generates an ILSe identifier with the provided ilseId.
     *
     * @param ilseId The ILSe number of a submission as an Integer
     * @return A string starting with "i" and then 7 numbers
     */
    fun generateIlseIdentifier(ilseId: Int): String

    /**
     * Searches for the sample associated to a given file and submission.
     *
     * @param file File object for which a belonging sample object is being searched for
     * @param submission Submission to which the sample belongs to
     * @return Sample object that is associated to the given file and submission.
     */
    @Throws(RelationException::class)
    fun findSampleByFile(file: File, submission: Submission): Sample?

    /**
     * Searches for a sample object associated to a file and submission via a given file name and submission object.
     *
     * @param filename Name of the file for which a belonging sample object is being searched for
     * @param submission Submission to which the sample belongs to
     *
     * @throws RelationException if the file names point to multiple associated samples.
     *
     * @return the found sample or `null` if no corresponding sample was found.
     */
    @Throws(RelationException::class)
    fun findSampleByFileName(filename: String, submission: Submission): Sample?

    fun findFastqFilePairs(filename: String, submission: Submission): List<File>

    /**
     * Creates a ticket in the ticketing system using JSON API calls.
     *
     * @param identifier The identifier for the submission.
     * @param projects A list of project names associated with the ticket.
     * @return The ticket number generated by the ticketing system, or an empty string if an error occurs,
     *         or if the runtime options 'ticketSystemPath' and 'createTicketJson' are not set.
     */
    fun createTicket(identifier: String, projects: List<String>): String
}
